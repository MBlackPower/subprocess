% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signals.R
\docType{data}
\name{signals}
\alias{process_kill}
\alias{process_send_signal}
\alias{process_terminate}
\alias{signals}
\title{Sending signals to the child process.}
\format{An object of class \code{list}.}
\usage{
signals

process_terminate(handle)

process_kill(handle)

process_send_signal(handle, signal)
}
\arguments{
\item{handle}{Process handle obtained from \code{spawn_process()}.}

\item{signal}{Signal number, one of \code{names(signals)}.}
}
\description{
Sending signals to the child process.

Operating System-level signals that can be used with
\code{\link[subprocess]{process_send_signal}} are defined in the
\code{signals} list which is generated automatically when package is
loaded. The list is also attached upon package load so signals are
available directly under their names.

\code{process_terminate} on Linux sends the
\code{SIGTERM} signal to the process pointed to by \code{handle}.
On Windows it calls \code{TerminateProcess()}.

\code{process_kill} on Linux sends the \code{SIGKILL}
signal to \code{handle}. On Windows it is an alias for
\code{process_terminate}.

\code{process_send_signal} sends an OS-level
\code{signal} to \code{handle}. In Linux all standard signal
numbers are supported. On Windows supported signals are
\code{SIGTERM}, \code{CTRL_C_EVENT} and \code{CTRL_BREAK_EVENT}.
Those values will be available via the \code{signals} list which
is also attached in the package namespace.
}
\examples{
\dontrun{
h <- spawn_process('bash')
process_signal(h, signals$SIGKILL)
process_signal(h, SIGKILL)
}

\dontrun{
# Windows
process_send_signal(h, SIGTERM)
process_send_signal(h, CTRL_C_EVENT)
process_send_signal(h, CTRL_BREAK_EVENT)
}

}
\seealso{
\code{\link{spawn_process}}
}
\keyword{datasets}

